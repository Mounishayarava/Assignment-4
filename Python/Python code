import random
# Employee shift preferences for each day of the week
employee_shifts = {
    "Alice": ["morning", "afternoon", "evening", "morning", "afternoon", "evening", "morning"],
    "Bob": ["afternoon", "morning", "afternoon", "evening", "morning", "evening", "morning"],
    "Carol": ["evening", "morning", "afternoon", "evening", "morning", "afternoon", "evening"]
}
# Available shifts for each day
shifts = ["morning", "afternoon", "evening"]
schedule = {day: {"morning": [], "afternoon": [], "evening": []} for day in range(7)}
def assign_shifts(employee_shifts):
    # Store the number of days worked by each employee
    days_worked = {employee: 0 for employee in employee_shifts}
    for day in range(7):
        for shift in shifts:
            # Find employees available for this shift and who have worked less than 5 days
            available_employees = [emp for emp in employee_shifts if employee_shifts[emp][day] == shift and days_worked[emp] < 5]
            
            if len(available_employees) < 2:
                # If fewer than 2 employees are available, randomly assign employees who have worked less than 5 days
                eligible_employees = [emp for emp in days_worked if days_worked[emp] < 5 and emp not in available_employees]
                # Ensure that we do not exceed the number of employees left
                needed_employees = 2 - len(available_employees)
                # If there are enough employees to meet the requirement, randomly sample
                if len(eligible_employees) >= needed_employees:
                    additional_employees = random.sample(eligible_employees, needed_employees)
                    available_employees.extend(additional_employees)
                else:
                    available_employees.extend(eligible_employees)
            schedule[day][shift].extend(available_employees)
            for emp in available_employees:
                days_worked[emp] += 1
    return schedule
# Calling the function and printing the schedule
final_schedule = assign_shifts(employee_shifts)
# Function to print the final schedule
def print_schedule(schedule):  
    for day in schedule:
        print(f"Day {day}:")
        for shift in shifts:
            print(f"  {shift.capitalize()}: {', '.join(schedule[day][shift])}")
print_schedule(final_schedule)
